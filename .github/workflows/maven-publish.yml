# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path
# bitshifted/git-auto-semver
name: Release

on:
  push:
    branches:
        - 'release'

jobs:
    
  build-central:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17 for Maven Central
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        settings-path: ${{ github.workspace }} # location for the settings.xml file
        server-id: ossrh  # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_OSSRH_USERNAME # env variable for username in deploy
        server-password: MAVEN_OSSRH_PWD # env variable for token in deploy        
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
        
    - name: Check if secret exists
      run: |
        if [[ -z "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" ]]; then
          echo "pgp secret does NOT exist"
        else
          echo "pgp secret exists"
          cat $GITHUB_WORKSPACE/settings.xml
        fi

    - name: Publish to Apache Maven Central
      run: mvn --batch-mode --no-transfer-progress release:prepare release:perform -P release --settings $GITHUB_WORKSPACE/settings.xml
      env:
        MAVEN_OSSRH_USERNAME: Nagel
        MAVEN_OSSRH_PWD: ${{ secrets.MAVEN_OSSRH_PWD }}        
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Push changes to Git
      run: |
        git push origin
        git push origin --tags
    

  build-github-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [build-central]
    
    env:
      HEADER_1: "## How to get it"
      HEADER_2: "## Changelog"

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: generate release notes
      uses: mikepenz/release-changelog-builder-action@develop
      id: create-release-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      
    - name: Prepare Publishing to Github Packages
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
        
    - name: Checkout tag
      run: |
        git status
        latestTag=$(git tag --sort=committerdate | grep "pojoMaker" | tail -1)
        git checkout $latestTag
        echo "release_tag=$latestTag" >>$GITHUB_ENV
        
    - name: Read project version
      run: echo "release_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >>$GITHUB_ENV
        
    - name: Publish to GitHub Packages 
      run: | 
        cat ${{ github.workspace }}/settings.xml
        echo "  "
        echo "version is : ${{ env.release_version }}:"
        echo "release tag: ${{ env.release_tag }}:"
        mvn --batch-mode --no-transfer-progress deploy -Dgpg.skip=true -DskipTests -P github --settings $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
    
    - name: create github release entry
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.release_tag }}
        generateReleaseNotes: true
        allowUpdates: true
        body: |
          ${{ env.HEADER_1 }}
          
          The latest version of that plugin is available on https://central.sonatype.com/artifact/io.github.ranSprd/netbeans-pojoMaker/overview
          or from Apache Netbeans Plugin Portal (https://plugins.netbeans.apache.org).
         
          ```
          ${{ env.HEADER_2 }}
          
          ${{ steps.create-release-notes.outputs.changelog }}

        token: ${{ secrets.GITHUB_TOKEN }}   
        
  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [build-central]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure Git user
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"
        git config pager.branch false

    - name: Merge back to master
      run: |
          git status
          git branch -vva
          git checkout master
          git pull
          git rebase release master
          git branch -vva
          git push origin

#          git fetch --unshallow